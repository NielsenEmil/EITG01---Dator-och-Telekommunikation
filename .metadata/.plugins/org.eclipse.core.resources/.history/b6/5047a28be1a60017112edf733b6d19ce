import java.util.*;

class State extends GlobalSimulation{
	
	public int numberInQueueA = 0, numberInQueueB = 0, accumulated = 0, noMeasurements = 0, typeA = 0, typeB = 0;
	
	private EventList myEventList;
	
	Random slump = new Random();
	
	State(EventList x){
		myEventList = x;
	}
	
	private void InsertEvent(int event, double timeOfEvent, int type){
		myEventList.InsertEvent(event, timeOfEvent, type);
	}
	
	
	public void TreatEvent(Event x){
		switch (x.eventType){
			case ARRIVAL_A:
				arrivalA();
				break;
			case ARRIVAL_B:
				arrivalB();
				break;
			case READY_A:
				ready();
				break;
			case MEASURE:
				measure();
				break;
		}
	}
	
	private double generateMean(double mean){
		return 2*mean*slump.nextDouble();
	}
	
	private void arrivalA(){
		if (numberInQueueB == 0 && numberInQueueA == 0){
			InsertEvent(READY, time + 0.002);
		}
			InsertEvent(ARRIVAL_A, time + generateMean(0.006667));
			numberInQueueA++;

	}
	
	private void arrivalB(){
		if (numberInQueueB == 0){
			InsertEvent(READY, time + 0.004);
		}
		numberInQueueB++;
	}

	private void ready(){
		if (numberInQueueB > 0){
			numberInQueueB--;
			InsertEvent(READY, time + 0.004);
		}
		else{
			if(numberInQueueA > 0){
				numberInQueueA--;
				InsertEvent(READY, time + 0.002);
				InsertEvent(ARRIVAL_B, time + 1 + 0.002);
			}
		}
		
	}
	
	
	private void measure(){
		accumulated = accumulated + numberInQueueA + numberInQueueB;
		noMeasurements++;
		InsertEvent(MEASURE, time + 0.1);
	}
}