//import java.util.*;
//
//class State extends GlobalSimulation{
//	
//	public int numberInQueueA = 0, numberInQueueB = 0, accumulated = 0, noMeasurements = 0, typeA = 0, typeB = 0;
//	
//	private EventList myEventList;
//	
//	Random slump = new Random();
//	
//	State(EventList x){
//		myEventList = x;
//	}
//	
//	private void InsertEvent(int event, double timeOfEvent){
//		myEventList.InsertEvent(event, timeOfEvent);
//	}
//	
//	
//	public void TreatEvent(Event x){
//		switch (x.eventType){
//			case ARRIVAL_A:
//				arrivalA();
//				break;
//			case ARRIVAL_B:
//				arrivalB();
//				break;
//			case READY:
//				ready();
//				break;
//			case MEASURE:
//				measure();
//				break;
//		}
//	}
//	
//	private double generateMean(double mean){
//		return 2*mean*slump.nextDouble();
//	}
//	
//	private void arrivalA(){
//		if (numberInQueueB == 0 && numberInQueueA == 0){
//			InsertEvent(READY, time + 0.002);
//		}
//			InsertEvent(ARRIVAL_A, time + generateMean(0.006667));
//			numberInQueueA++;
//
//	}
//	
//	private void arrivalB(){
//		if (numberInQueueB == 0){
//			InsertEvent(READY, time + 0.004);
//		}
//		numberInQueueB++;
//	}
//
//	private void ready(){
//		if (numberInQueueB > 0){
//			numberInQueueB--;
//			InsertEvent(READY, time + 0.004);
//		}
//		else{
//			if(numberInQueueA > 0){
//				numberInQueueA--;
//				InsertEvent(READY, time + 0.002);
//				InsertEvent(ARRIVAL_B, time + 1 + 0.002);
//			}
//		}
//		
//	}
//	
//	
//	private void measure(){
//		accumulated = accumulated + numberInQueueA + numberInQueueB;
//		noMeasurements++;
//		InsertEvent(MEASURE, time + 0.1);
//	}
//}




























import java.util.*;

class State extends GlobalSimulation{
    
    public int numberInQueue = 0, numberInQueueB = 0, accumulated = 0, noMeasurements = 0;
    
    private int ready = 0;
    
    private EventList myEventList;

    Random slump = new Random();
    
    State(EventList x){
        myEventList = x;
    }
    
    private void InsertEvent(int event, double timeOfEvent){
        myEventList.InsertEvent(event, timeOfEvent);
    }
    
    
    public void TreatEvent(Event x){
        switch (x.eventType){
            case ARRIVAL:
                arrival();
                break;
            case READY:
                ready();
                break;
            case MEASURE:
                measure();
                break;
//            case READY_B:
//                readyB();
//                break;
            case ARRIVAL_B:
                arrivalB();
                break;
        }
    }
    
    private double generateMean(double mean){
        return 2*mean*slump.nextDouble();
    }
    
    private void arrival(){
        if (numberInQueue == 0 && numberInQueueB == 0){
            // Får ready() att aktiveras
            InsertEvent(READY, time + 0.002);
        }
                    
        // Kommer en ny jobb A hela tiden
        InsertEvent(ARRIVAL, time + generateMean(0.006667));
        numberInQueue++;
    }
    private void arrivalB(){
        // Det har kommit en B jobb in i kön 
        
        if (numberInQueue == 0 && numberInQueueB == 0){
            // Får ready() att aktiveras
            InsertEvent(READY, time + 0.004);
        }
        numberInQueueB++;
//        if(numberInQueueB <= 1){
//            InsertEvent(READY, time + 0.004);
//            numberInQueueB--;
//        }
    }
    
//    private void readyB(){
//        numberInQueueB--;
//        if (numberInQueueB > 0){
//            InsertEvent(READY_B, time + 0.004);
//        }
//    }
    
    private void ready(){
        ready++;
        // Se om kön har Jobb B och betjäna de om de har
        if(numberInQueueB > 0){
            numberInQueueB--;
            InsertEvent(READY, time + 0.004);
        } else{
            // Betjänar A och lägger till Jobb B
            if (numberInQueue > 0){
                numberInQueue--;
                InsertEvent(READY, time + 0.002);
                InsertEvent(ARRIVAL_B, time + 1 + 0.002);
                
            }
        }
    }

    private void measure(){
        accumulated = accumulated + numberInQueue;
        noMeasurements++;
        InsertEvent(MEASURE, time + 0.1);
    }
}

